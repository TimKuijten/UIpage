<?php
/*
Plugin Name: Kovacic CV Feedback + reCAPTCHA v3
Description: CV submission with AI-powered feedback (PDF/DOCX). If the server cannot read the PDF, the browser extracts the text with PDF.js and, if it is scanned, performs OCR with Tesseract.js; it then sends the hidden text and the server generates a temporary DOCX from that text for a reliable flow.
Version: 1.6.0
Author: Tim Kuijten - Kovacic Executive Talent Research
*/

if (!defined('ABSPATH')) exit;

class Kovacic_CV_Feedback {
    const OPT_GROUP = 'kcvf_es_options';
    const OPT_API_KEY = 'kcvf_es_openai_api_key';
    const OPT_AUTO_FEEDBACK = 'kcvf_es_auto_feedback';
    const OPT_NOTIFY_EMAIL = 'kcvf_es_notify_email';
    const OPT_GDPR_TEXT = 'kcvf_es_gdpr_text';
    const OPT_THANKYOU_TEXT = 'kcvf_es_thankyou_text';

    // reCAPTCHA v3
    const OPT_RECAPTCHA_ENABLE = 'kcvf_es_recaptcha_enable';
    const OPT_RECAPTCHA_SITE   = 'kcvf_es_recaptcha_site';
    const OPT_RECAPTCHA_SECRET = 'kcvf_es_recaptcha_secret';
    const OPT_RECAPTCHA_THRESH = 'kcvf_es_recaptcha_threshold';

    public function __construct() {
        add_action('init', [$this, 'register_cpt']);
        add_action('admin_menu', [$this, 'admin_menu']);
        add_action('admin_init', [$this, 'register_settings']);
        add_action('admin_notices', [$this, 'admin_notices_tools']);
        add_shortcode('kovacic_cv_submit', [$this, 'shortcode']);
        add_shortcode('kovacic_cv_register', [$this, 'shortcode_register']);
        add_action('wp_enqueue_scripts', [$this, 'assets']);
        add_action('add_meta_boxes', [$this, 'metabox']);
        add_action('save_post', [$this, 'save_meta']);
    }

    public function register_cpt() {
        register_post_type('cv_submission', [
            'labels' => [
                'name' => 'CV Submissions',
                'singular_name' => 'CV Submission',
                'add_new_item' => 'Add New Submission',
                'edit_item' => 'Edit Submission',
                'view_item' => 'View Submission',
                'search_items' => 'Search Submissions',
            ],
            'public' => false,
            'show_ui' => true,
            'supports' => ['title', 'editor'],
            'menu_icon' => 'dashicons-id',
        ]);
    }

    public function admin_menu() {
        add_options_page('Kovacic CV Feedback', 'Kovacic CV Feedback', 'manage_options', 'kcvf-es', [$this, 'settings_page']);
    }

    public function register_settings() {
        register_setting(self::OPT_GROUP, self::OPT_API_KEY);
        register_setting(self::OPT_GROUP, self::OPT_AUTO_FEEDBACK);
        register_setting(self::OPT_GROUP, self::OPT_NOTIFY_EMAIL);
        register_setting(self::OPT_GROUP, self::OPT_GDPR_TEXT);
        register_setting(self::OPT_GROUP, self::OPT_THANKYOU_TEXT);

        if (!get_option(self::OPT_GDPR_TEXT)) {
            update_option(self::OPT_GDPR_TEXT, 'I consent to the processing of my personal data for recruitment purposes in accordance with the Privacy Policy (GDPR).');
        }
        if (!get_option(self::OPT_THANKYOU_TEXT)) {
            update_option(self::OPT_THANKYOU_TEXT, 'Thank you! We have received your CV. The feedback is shown below.');
        }

        // reCAPTCHA v3
        register_setting(self::OPT_GROUP, self::OPT_RECAPTCHA_ENABLE);
        register_setting(self::OPT_GROUP, self::OPT_RECAPTCHA_SITE);
        register_setting(self::OPT_GROUP, self::OPT_RECAPTCHA_SECRET);
        register_setting(self::OPT_GROUP, self::OPT_RECAPTCHA_THRESH);

        if (get_option(self::OPT_RECAPTCHA_THRESH) === false) {
            update_option(self::OPT_RECAPTCHA_THRESH, '0.5');
        }
    }

    /** Aviso de binarios útiles en servidor (opcionales gracias a PDF.js/Tesseract.js) */
    public function admin_notices_tools() {
        if (!current_user_can('manage_options')) return;
        $missing = [];
        if (empty(trim(@shell_exec('which pdftotext')))) $missing[] = '<code>pdftotext</code>';
        if (empty(trim(@shell_exec('which mutool'))))    $missing[] = '<code>mutool</code>';
        if (empty(trim(@shell_exec('which ocrmypdf'))))  $missing[] = '<code>ocrmypdf</code>';
        if (!class_exists('ZipArchive'))                 $missing[] = '<code>ZipArchive (PHP)</code>';
        if (!empty($missing)) {
            echo '<div class="notice notice-info"><p><strong>KCVF:</strong> Recommended server tools (optional): '
                . implode(', ', $missing)
                . '. This plugin also uses PDF.js + Tesseract.js in the browser to read PDFs without these tools.</p></div>';
        }
    }

    public function settings_page() {
        ?>
        <div class="wrap">
            <h1>Kovacic CV Feedback — Settings</h1>
            <form method="post" action="options.php">
                <?php settings_fields(self::OPT_GROUP); ?>
                <h2 class="title">General</h2>
                <table class="form-table" role="presentation">
                    <tr>
                        <th scope="row"><label for="<?php echo self::OPT_API_KEY; ?>">OpenAI API Key</label></th>
                        <td>
                            <input type="password" id="<?php echo self::OPT_API_KEY; ?>" name="<?php echo self::OPT_API_KEY; ?>" value="<?php echo esc_attr(get_option(self::OPT_API_KEY)); ?>" class="regular-text" placeholder="sk-..." />
                            <p class="description">Used to generate automatic CV feedback.</p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Instant feedback</th>
                        <td>
                            <label>
                                <input type="checkbox" name="<?php echo self::OPT_AUTO_FEEDBACK; ?>" value="1" <?php checked(get_option(self::OPT_AUTO_FEEDBACK), '1'); ?> />
                                Generate feedback immediately after submission
                            </label>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="<?php echo self::OPT_NOTIFY_EMAIL; ?>">Internal notification emails</label></th>
                        <td>
                            <input type="text" id="<?php echo self::OPT_NOTIFY_EMAIL; ?>" name="<?php echo self::OPT_NOTIFY_EMAIL; ?>" value="<?php echo esc_attr(get_option(self::OPT_NOTIFY_EMAIL)); ?>" class="regular-text" placeholder="talent@yourdomain.com, hr@yourdomain.com" />
                            <p class="description">Optional. If several are listed, separate them with commas. We'll send a notice for each submission.</p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="<?php echo self::OPT_GDPR_TEXT; ?>">Consent text (GDPR)</label></th>
                        <td><textarea id="<?php echo self::OPT_GDPR_TEXT; ?>" name="<?php echo self::OPT_GDPR_TEXT; ?>" class="large-text" rows="3"><?php echo esc_textarea(get_option(self::OPT_GDPR_TEXT)); ?></textarea></td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="<?php echo self::OPT_THANKYOU_TEXT; ?>">Thank-you message</label></th>
                        <td><textarea id="<?php echo self::OPT_THANKYOU_TEXT; ?>" name="<?php echo self::OPT_THANKYOU_TEXT; ?>" class="large-text" rows="3"><?php echo esc_textarea(get_option(self::OPT_THANKYOU_TEXT)); ?></textarea></td>
                    </tr>
                </table>

                <h2 class="title">Security — Google reCAPTCHA v3</h2>
                <table class="form-table" role="presentation">
                    <tr>
                        <th scope="row">Enable reCAPTCHA v3</th>
                        <td>
                            <label>
                                <input type="checkbox" name="<?php echo self::OPT_RECAPTCHA_ENABLE; ?>" value="1" <?php checked(get_option(self::OPT_RECAPTCHA_ENABLE), '1'); ?> />
                                Protect the form with reCAPTCHA v3 (invisible)
                            </label>
                            <p class="description">Create your keys at <a href="https://www.google.com/recaptcha/admin/create" target="_blank">Google reCAPTCHA</a> (choose v3).</p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="<?php echo self::OPT_RECAPTCHA_SITE; ?>">Site Key</label></th>
                        <td><input type="text" id="<?php echo self::OPT_RECAPTCHA_SITE; ?>" name="<?php echo self::OPT_RECAPTCHA_SITE; ?>" value="<?php echo esc_attr(get_option(self::OPT_RECAPTCHA_SITE)); ?>" class="regular-text" placeholder="6Le..."></td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="<?php echo self::OPT_RECAPTCHA_SECRET; ?>">Secret Key</label></th>
                        <td><input type="password" id="<?php echo self::OPT_RECAPTCHA_SECRET; ?>" name="<?php echo self::OPT_RECAPTCHA_SECRET; ?>" value="<?php echo esc_attr(get_option(self::OPT_RECAPTCHA_SECRET)); ?>" class="regular-text" placeholder="6Le..."></td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="<?php echo self::OPT_RECAPTCHA_THRESH; ?>">Threshold (minimum score)</label></th>
                        <td>
                            <input type="number" step="0.1" min="0" max="1" id="<?php echo self::OPT_RECAPTCHA_THRESH; ?>" name="<?php echo self::OPT_RECAPTCHA_THRESH; ?>" value="<?php echo esc_attr(get_option(self::OPT_RECAPTCHA_THRESH, '0.5')); ?>" class="small-text">
                            <p class="description">Higher values = more strict. Recommended 0.5–0.7.</p>
                        </td>
                    </tr>
                </table>

                <?php submit_button('Save changes'); ?>
            </form>
        </div>
        <?php
    }

    public function assets() {
        // Estilos UI
        $css = "
        .kcvf-wrapper{max-width:720px;margin:0 auto;background:#fff;border-radius:12px;padding:24px;box-shadow:0 10px 30px rgba(0,0,0,.06)}
        .kcvf-wrapper h2{font-size:28px;line-height:1.2;margin:0 0 14px;color:#0A212E}
        .kcvf-field{margin-bottom:16px}
        .kcvf-field label{display:block;font-weight:600;margin-bottom:6px}
        .kcvf-input, .kcvf-select, .kcvf-textarea{width:100%;padding:12px;border:1px solid #e5e7eb;border-radius:10px;font-size:15px}
        .kcvf-select{height:44px}
        .kcvf-consent{display:flex;gap:10px;align-items:flex-start}
        .kcvf-consent input{margin-top:3px}
        .kcvf-btn{background:#0A212E;color:#fff;border:none;padding:14px 18px;border-radius:12px;cursor:pointer;font-weight:600}
        .kcvf-btn:hover{opacity:.95}
        .kcvf-btn:disabled{opacity:.6;cursor:not-allowed}
        .kcvf-btn.loading{position:relative;opacity:.8}
        .kcvf-btn.loading:after{content:'';position:absolute;right:12px;top:50%;width:16px;height:16px;margin-top:-8px;border:2px solid #fff;border-top-color:transparent;border-radius:50%;animation:kcvf-spin .6s linear infinite}
        @keyframes kcvf-spin{to{transform:rotate(360deg)}}
        .kcvf-alert{background:#f6ffed;border:1px solid #b7eb8f;padding:12px;border-radius:10px;margin-bottom:16px}
        .kcvf-error{background:#fff1f0;border:1px solid #ffa39e;padding:12px;border-radius:10px;margin-bottom:16px}
        .kcvf-feedback{white-space:normal;border:1px dashed #e5e7eb;border-radius:10px;padding:14px}
        .kcvf-debug{background:#fff7ed;border:1px solid #fdba74;padding:12px;border-radius:10px;margin-top:12px}
        ";
        wp_register_style('kcvf-es-inline', false);
        wp_enqueue_style('kcvf-es-inline');
        wp_add_inline_style('kcvf-es-inline', $css);

        // PDF.js y Tesseract.js para extracción/OCR en el cliente
        wp_enqueue_script(
            'pdfjs',
            'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js',
            [],
            '3.11.174',
            true
        );
        wp_add_inline_script(
            'pdfjs',
            'window.pdfjsLib = window["pdfjs-dist/build/pdf"] || window.pdfjsLib;' .
            'if(window.pdfjsLib){window.pdfjsLib.GlobalWorkerOptions.workerSrc=' .
            '"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js";}',
            'after'
        );

        wp_enqueue_script(
            'tesseract',
            'https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.min.js',
            [],
            '5.0.0',
            true
        );

        // Script reCAPTCHA v3 si procede
        $recaptcha_on = get_option(self::OPT_RECAPTCHA_ENABLE) === '1';
        $site_key = trim((string)get_option(self::OPT_RECAPTCHA_SITE));
        if ($recaptcha_on && $site_key) {
            wp_enqueue_script('google-recaptcha', 'https://www.google.com/recaptcha/api.js?render=' . rawurlencode($site_key), [], null, true);
        }

        // JS del formulario: PDF.js → texto; si vacío → Tesseract.js OCR; luego reCAPTCHA si está activo
        $inline = <<<JS
  document.addEventListener('DOMContentLoaded', function(){
  document.querySelectorAll('form.kcvf-form').forEach(function(form){
    var fileInput = form.querySelector('input[type="file"][name="kcvf_file"]');
    var hiddenPdfText = document.createElement('textarea');
    hiddenPdfText.name = 'kcvf_pdf_text';
    hiddenPdfText.style.display = 'none';
    form.appendChild(hiddenPdfText);

    var btn = form.querySelector('.kcvf-btn');
    var submitting = false;

    async function extractPdfWithPDFjs(file){
      if (!window.pdfjsLib) return '';
      try {
        const buf = await file.arrayBuffer();
        const pdf = await window.pdfjsLib.getDocument({ data: buf }).promise;
        let full = '';
        for (let p=1; p<=pdf.numPages; p++){
          const page = await pdf.getPage(p);
          const content = await page.getTextContent();
          const strings = content.items.map(it => it.str);
          full += strings.join(' ') + '\\n\\n';
        }
        return full.trim();
      } catch(e){ return ''; }
    }

    async function ocrPdfWithTesseract(file){
      if (!window.Tesseract || !window.pdfjsLib) return '';
      const buf = await file.arrayBuffer();
      const pdf = await window.pdfjsLib.getDocument({ data: buf }).promise;

      // offscreen canvas
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');

      let ocrText = '';
      for (let p=1; p<=pdf.numPages; p++){
        const page = await pdf.getPage(p);
        const viewport = page.getViewport({ scale: 2.0 });
        canvas.width = viewport.width;
        canvas.height = viewport.height;
        await page.render({ canvasContext: ctx, viewport }).promise;

        const dataURL = canvas.toDataURL('image/png');
        try {
          const { data: { text } } = await Tesseract.recognize(
            dataURL,
            'spa+eng',
            { logger: ()=>{} }
          );
          if (text) ocrText += text + '\\n\\n';
        } catch(e) {
          // continuar aunque una página falle
        }
        ctx.clearRect(0,0,canvas.width,canvas.height);
      }
      return ocrText.trim();
    }

    form.addEventListener('submit', function(e){
      if (submitting) return;
      submitting = true;
      if (btn){ btn.classList.add('loading'); btn.disabled = true; }
      var file = fileInput && fileInput.files && fileInput.files[0] ? fileInput.files[0] : null;
      if (!file) return;

      if (file.type === 'application/pdf') {
        e.preventDefault();
        (async function(){
          // 1) Intento PDF.js
          if (!hiddenPdfText.value) {
            const pdfText = await extractPdfWithPDFjs(file);
            if (pdfText && pdfText.length > 0) hiddenPdfText.value = pdfText;
          }
          // 2) OCR si sigue vacío (escaneado)
          if (!hiddenPdfText.value) {
            const ocrText = await ocrPdfWithTesseract(file);
            if (ocrText && ocrText.length > 0) hiddenPdfText.value = ocrText;
          }

          // Continuar (con reCAPTCHA si está)
          var tokenField = form.querySelector('input[name="kcvf_recaptcha_token"]');
          if (window.grecaptcha && typeof grecaptcha.execute === 'function') {
            grecaptcha.ready(function(){
              grecaptcha.execute('%SITE_KEY%', {action: 'cv_submit'}).then(function(token){
                if (tokenField) tokenField.value = token;
                form.submit();
              });
            });
          } else {
            form.submit();
          }
        })();
      }
    });
  });
});
JS;

        // Sustituir site key si existe
        if ($recaptcha_on && $site_key) {
            $inline = str_replace('%SITE_KEY%', esc_js($site_key), $inline);
        } else {
            $inline = str_replace('%SITE_KEY%', '', $inline);
        }

        wp_register_script('kcvf-es-form', '', ['pdfjs','tesseract'], null, true);
        wp_add_inline_script('kcvf-es-form', $inline, 'after');
        wp_enqueue_script('kcvf-es-form');
    }

    public function shortcode() {
        if (
            $_SERVER['REQUEST_METHOD'] === 'POST'
            && isset($_POST['kcvf_es_nonce'])
            && isset($_POST['kcvf_mode'])
            && $_POST['kcvf_mode'] === 'submit'
        ) {
            return $this->handle_submission(false);
        }
        return $this->render_form();
    }

    public function shortcode_register() {
        if (
            $_SERVER['REQUEST_METHOD'] === 'POST'
            && isset($_POST['kcvf_es_nonce'])
            && isset($_POST['kcvf_mode'])
            && $_POST['kcvf_mode'] === 'register'
        ) {
            return $this->handle_submission(true);
        }
        return $this->render_form([], [], true);
    }

    /** Normaliza fences/comillas raras del modelo */
    private function kcvf_normalize_ai_html( $raw ) {
        $out = trim( (string) $raw );
        $out = preg_replace('/^\s*```(?:html|markdown|md)?\s*/i', '', $out);
        $out = preg_replace('/\s*```\s*$/', '', $out);
        $out = preg_replace('/^[\x{00AB}\x{00BB}\x{0060}\s]*(html)?[\x{0060}\s]*/u', '', $out);
        $out = preg_replace('/[\x{00AB}\x{00BB}]+$/u', '', $out);
        return trim($out);
    }

    /** Quita <strong> del cuerpo: solo H2/H3 en negrita por CSS */
    private function strip_strong_from_body($html) {
        return preg_replace('/<\/?strong>/', '', (string)$html);
    }

    /** Obtiene emails válidos para avisos internos */
    private function get_notify_emails() {
        $raw = (string) get_option(self::OPT_NOTIFY_EMAIL);
        if (!$raw) return [];
        $parts = preg_split('/[\s,;]+/', $raw);
        $emails = [];
        foreach ($parts as $part) {
            $email = sanitize_email($part);
            if ($email && is_email($email)) {
                $emails[] = $email;
            }
        }
        return $emails;
    }

    private function render_form($errors = [], $old = [], $register_only = false) {
        ob_start();
        $gdpr_text = get_option(self::OPT_GDPR_TEXT);
        $recaptcha_on = get_option(self::OPT_RECAPTCHA_ENABLE) === '1';
        $title = $register_only ? 'Register your CV' : 'Submit your CV for feedback';
        $btn   = $register_only ? 'Upload CV' : 'Send and get feedback';
        ?>
        <div class="kcvf-wrapper">
            <h2><?php echo esc_html($title); ?></h2>
            <?php if (!empty($errors)): ?>
                <div class="kcvf-error"><strong>Please fix:</strong><br><?php echo implode('<br>', array_map('esc_html', $errors)); ?></div>
            <?php endif; ?>

            <form method="post" enctype="multipart/form-data" class="kcvf-form">
                <?php wp_nonce_field('kcvf_es_submit', 'kcvf_es_nonce'); ?>
                <input type="hidden" name="kcvf_mode" value="<?php echo $register_only ? 'register' : 'submit'; ?>">

                <div class="kcvf-field">
                    <label for="kcvf_name">Full name</label>
                    <input class="kcvf-input" type="text" name="kcvf_name" id="kcvf_name" value="<?php echo isset($old['name']) ? esc_attr($old['name']) : ''; ?>" required placeholder="Your full name">
                </div>

                <div class="kcvf-field">
                    <label for="kcvf_email">Email address</label>
                    <input class="kcvf-input" type="email" name="kcvf_email" id="kcvf_email" value="<?php echo isset($old['email']) ? esc_attr($old['email']) : ''; ?>" required placeholder="name@example.com">
                </div>

                <div class="kcvf-field">
                    <label for="kcvf_role">Target role / Area</label>
                    <input class="kcvf-input" type="text" name="kcvf_role" id="kcvf_role" placeholder="e.g., Country Manager, Head of Controlling, CFO..." value="<?php echo isset($old['role']) ? esc_attr($old['role']) : ''; ?>">
                </div>

                <div class="kcvf-field">
                    <label for="kcvf_sector">Sector</label>
                    <select class="kcvf-select" name="kcvf_sector" id="kcvf_sector">
                        <option value="">— Select —</option>
                        <?php
                        $sectors = [
                            'Renewable energy',
                            'Thermal energy',
                            'Finance',
                            'Technology',
                            'Engineering',
                            'EPC',
                            'HR',
                            'Mining',
                            'Legal',
                            'Other',
                        ];
                        $old_sector = $old['sector'] ?? '';
                        foreach ($sectors as $sec) {
                            printf('<option%s>%s</option>', selected($old_sector, $sec, false), esc_html($sec));
                        }
                        ?>
                    </select>
                </div>

                <div class="kcvf-field">
                    <label for="kcvf_vacancy">Vacancy (optional)</label>
                    <select class="kcvf-select" name="kcvf_vacancy" id="kcvf_vacancy">
                        <option value="">— Select —</option>
                        <?php
                        $vacancy_old = isset($old['vacancy']) ? intval($old['vacancy']) : 0;
                        $vacancies = get_posts([
                            'post_type'   => 'post',
                            'numberposts' => -1,
                            'tax_query'   => [[
                                'taxonomy' => 'category',
                                'field'    => 'slug',
                                'terms'    => ['KovacicExecutive','KovacicTalent'],
                            ]],
                        ]);
                        foreach ($vacancies as $vac) {
                            printf('<option value="%d" %s>%s</option>', $vac->ID, selected($vacancy_old, $vac->ID, false), esc_html($vac->post_title));
                        }
                        ?>
                    </select>
                </div>

                <div class="kcvf-field">
    <label for="kcvf_file">Upload CV (PDF or DOCX, max 5 MB)</label>
    <input type="file" name="kcvf_file" id="kcvf_file"
           accept=".pdf,.docx,application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
           required>
    <p style="font-size:13px;color:#666;margin-top:6px;">
        Note: if your CV is a scanned PDF, processing may take a few minutes.
    </p>
</div>


                <div class="kcvf-field">
                    <label for="kcvf_notes">Notes (optional)</label>
                    <textarea class="kcvf-textarea" name="kcvf_notes" id="kcvf_notes" rows="4" placeholder="Additional notes"></textarea>
                </div>

                <div class="kcvf-field kcvf-consent">
                    <input type="checkbox" name="kcvf_consent" id="kcvf_consent" required>
                    <label for="kcvf_consent"><?php echo wp_kses_post($gdpr_text); ?></label>
                </div>

                <?php if ($recaptcha_on): ?>
                    <input type="hidden" name="kcvf_recaptcha_token" value="">
                <?php endif; ?>

                <button class="kcvf-btn" type="submit"><?php echo esc_html($btn); ?></button>
                <?php if (!$register_only): ?>
                    <p style="font-size:13px;color:#666;margin-top:6px;">Note: generating feedback may take up to a minute.</p>
                <?php endif; ?>
            </form>
        </div>
        <?php
        return ob_get_clean();
    }

    private function handle_submission($register_only = false) {
        if (!wp_verify_nonce($_POST['kcvf_es_nonce'], 'kcvf_es_submit')) {
            return $this->render_form(['Invalid form token. Reload the page and try again.'], [], $register_only);
        }

        $errors = [];
        $name   = isset($_POST['kcvf_name']) ? sanitize_text_field($_POST['kcvf_name']) : '';
        $email  = isset($_POST['kcvf_email']) ? sanitize_email($_POST['kcvf_email']) : '';
        $role   = isset($_POST['kcvf_role']) ? sanitize_text_field($_POST['kcvf_role']) : '';
        $sector = isset($_POST['kcvf_sector']) ? sanitize_text_field($_POST['kcvf_sector']) : '';
        $notes  = isset($_POST['kcvf_notes']) ? sanitize_textarea_field($_POST['kcvf_notes']) : '';
        $vacancy = isset($_POST['kcvf_vacancy']) ? intval($_POST['kcvf_vacancy']) : 0;
        $consent = !empty($_POST['kcvf_consent']);

        if (!$name) $errors[] = 'Please enter your name.';
        if (!$email || !is_email($email)) $errors[] = 'Please enter a valid email address.';
        if (!$consent) $errors[] = 'You must accept the consent.';
        if (empty($_FILES['kcvf_file']['name'])) $errors[] = 'Attach your CV in PDF or DOCX.';

        // ==== Validación reCAPTCHA v3 ====
        $recaptcha_on = get_option(self::OPT_RECAPTCHA_ENABLE) === '1';
        $site_key = trim((string)get_option(self::OPT_RECAPTCHA_SITE));
        $secret   = trim((string)get_option(self::OPT_RECAPTCHA_SECRET));
        $threshold = floatval(get_option(self::OPT_RECAPTCHA_THRESH, '0.5'));

        if ($recaptcha_on && $site_key && $secret) {
            $token = isset($_POST['kcvf_recaptcha_token']) ? sanitize_text_field($_POST['kcvf_recaptcha_token']) : '';
            if (!$token) {
                $errors[] = 'Could not verify reCAPTCHA. Reload the page and try again.';
            } else {
                $resp = wp_remote_post('https://www.google.com/recaptcha/api/siteverify', [
                    'timeout' => 20,
                    'body' => ['secret' => $secret, 'response' => $token]
                ]);
                if (is_wp_error($resp)) {
                    $errors[] = 'Error contacting reCAPTCHA. Please try again.';
                } else {
                    $data = json_decode(wp_remote_retrieve_body($resp), true);
                    $ok = isset($data['success']) && $data['success'];
                    $score_ok = isset($data['score']) ? floatval($data['score']) >= $threshold : false;
                    $action_ok = !isset($data['action']) || $data['action'] === 'cv_submit';
                    if (!($ok && $score_ok && $action_ok)) $errors[] = 'reCAPTCHA verification failed. Please try again.';
                }
            }
        }
        // ==== Fin reCAPTCHA ====

        // Subida + extracción
        $file_text = '';
        $stored_path = '';
        $extract_method = 'unknown';
        $char_count = 0;
        $excerpt_400 = '';
        $converted_docx = '';

        if (empty($errors) && !empty($_FILES['kcvf_file']['name'])) {
            $file = $_FILES['kcvf_file'];
            if ($file['error'] !== UPLOAD_ERR_OK) {
                $errors[] = 'Error uploading the file. Please try again.';
            } else {
                $allowed = [
                    'application/pdf' => 'pdf',
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => 'docx',
                ];
                $finfo = finfo_open(FILEINFO_MIME_TYPE);
                $mime = finfo_file($finfo, $file['tmp_name']);
                finfo_close($finfo);

                if (!isset($allowed[$mime])) {
                    $errors[] = 'File type not allowed. Use PDF or DOCX.';
                } elseif ($file['size'] > 5 * 1024 * 1024) {
                    $errors[] = 'File too large (max 5 MB).';
                } else {
                    $upload_dir = wp_upload_dir();
                    $cv_dir = trailingslashit($upload_dir['basedir']) . 'cv-uploads';
                    if (!file_exists($cv_dir)) wp_mkdir_p($cv_dir);
                    $ext = $allowed[$mime];
                    $filename = 'cv_' . time() . '_' . wp_generate_password(6, false) . '.' . $ext;
                    $dest = trailingslashit($cv_dir) . $filename;
                    if (!move_uploaded_file($file['tmp_name'], $dest)) {
                        $errors[] = 'Could not save the file on the server.';
                    } else {
                        $stored_path = $dest;

                        if ($ext === 'docx') {
                            $file_text = $this->extract_docx_text($dest);
                            $extract_method = 'docx-zip';
                        }

                        if ($ext === 'pdf') {
                            // 0) ¿Vino texto extraído/OCR por el cliente?
                            $client_text = isset($_POST['kcvf_pdf_text']) ? (string) $_POST['kcvf_pdf_text'] : '';
                            if ($client_text !== '') {
                                $file_text = trim($client_text);
                                $extract_method = 'client-pdfjs/tesseract';
                            } else {
                                // 1) Intento servidor (si existen binarios)
                                $file_text = $this->extract_pdf_text_server($dest, $extract_method); // puede devolver ''
                            }

                            // 2) Si tenemos texto (cliente o servidor) → crear DOCX temporal desde texto
                            if ($file_text) {
                                $base = pathinfo($dest, PATHINFO_FILENAME);
                                $converted_docx = trailingslashit($cv_dir) . $base . '_frompdf.docx';
                                if ($this->generate_docx_from_text($file_text, $converted_docx)) {
                                    // Reutiliza extractor DOCX por coherencia
                                    $file_text = $this->extract_docx_text($converted_docx);
                                    $extract_method .= ' -> pdf2docx';
                                }
                            }
                        }

                        if (!$file_text) {
                            $file_text = "(Could not automatically extract text from the file. It may be a scanned or protected PDF).
Please upload your CV in DOCX or in a PDF with selectable text (OCR). You can also paste the content as text in the notes field.";
                        }

                        $char_count = mb_strlen((string)$file_text);
                        $excerpt_400 = mb_substr((string)$file_text, 0, 400);
                        error_log('[KCVF] Extract method: ' . $extract_method . ' | chars=' . $char_count);
                    }
                }
            }
        }

        if (!empty($errors)) {
            return $this->render_form($errors, ['name' => $name, 'email' => $email, 'role' => $role, 'sector' => $sector, 'notes' => $notes, 'vacancy' => $vacancy], $register_only);
        }

        // Guardar envío
        $post_id = wp_insert_post([
            'post_type' => 'cv_submission',
            'post_status' => 'publish',
            'post_title' => ($name ? $name . ' — ' : '') . $email . ' — ' . current_time('mysql'),
            'post_content' => wp_kses_post($notes),
        ]);

        if ($post_id && $stored_path) {
            add_post_meta($post_id, '_kcvf_file', $stored_path);
            add_post_meta($post_id, '_kcvf_name', $name);
            add_post_meta($post_id, '_kcvf_email', $email);
            add_post_meta($post_id, '_kcvf_role', $role);
            add_post_meta($post_id, '_kcvf_sector', $sector);
            add_post_meta($post_id, '_kcvf_extract_method', $extract_method);
            add_post_meta($post_id, '_kcvf_char_count', $char_count);
            add_post_meta($post_id, '_kcvf_text_excerpt', $excerpt_400);
            if ($converted_docx) add_post_meta($post_id, '_kcvf_converted_docx', $converted_docx);
        }

        // Registrar automáticamente en Pipeline si está activo
        if ($stored_path && post_type_exists('kvt_candidate')) {
            $upload_dir = wp_upload_dir();
            $cv_url = isset($upload_dir['basedir'], $upload_dir['baseurl'])
                ? str_replace($upload_dir['basedir'], $upload_dir['baseurl'], $stored_path)
                : '';

            $parts = preg_split('/\s+/', trim($name), 2);
            $first = $parts[0] ?? '';
            $last  = $parts[1] ?? '';

            $candidate_id = wp_insert_post([
                'post_type'   => 'kvt_candidate',
                'post_status' => 'publish',
                'post_title'  => trim($name ?: $email),
            ]);

            if ($candidate_id) {
                update_post_meta($candidate_id, 'kvt_first_name', $first);
                update_post_meta($candidate_id, 'first_name', $first);
                update_post_meta($candidate_id, 'kvt_last_name', $last);
                update_post_meta($candidate_id, 'last_name', $last);
                update_post_meta($candidate_id, 'kvt_email', $email);
                update_post_meta($candidate_id, 'email', $email);
                update_post_meta($candidate_id, 'kvt_sector', $sector);
                update_post_meta($candidate_id, 'sector', $sector);
                if ($notes) {
                    $note_line = date_i18n('d-m-Y') . '|Candidate|Note sent when submitting CV: ' . str_replace(['|', "\r", "\n"], ' ', $notes);
                    update_post_meta($candidate_id, 'kvt_notes', $note_line);
                    update_post_meta($candidate_id, 'notes', $note_line);
                }
                if ($cv_url) {
                    update_post_meta($candidate_id, 'kvt_cv_url', esc_url_raw($cv_url));
                    update_post_meta($candidate_id, 'cv_url', esc_url_raw($cv_url));
                }
                $today = date_i18n('d-m-Y');
                update_post_meta($candidate_id, 'kvt_cv_uploaded', $today);
                update_post_meta($candidate_id, 'cv_uploaded', $today);
                if ($file_text) {
                    update_post_meta($candidate_id, 'kvt_cv_text', $file_text);
                }
                if ($vacancy) {
                    $vac_post = get_post($vacancy);
                    if ($vac_post) {
                        $term = get_term_by('name', $vac_post->post_title, 'kvt_process');
                        if ($term && !is_wp_error($term)) {
                            wp_set_object_terms($candidate_id, [$term->term_id], 'kvt_process', true);
                            update_post_meta($candidate_id, 'kvt_status', 'Long list');
                            update_post_meta($candidate_id, 'kvt_longlist_pending', '1');
                        }
                    }
                }
                if ($file_text) {
                    do_action('kvt_update_profile_from_cv', $candidate_id);
                }
            }
        }

        $thankyou = $register_only
            ? 'Thank you! We have received your CV. We will keep you informed.'
            : get_option(self::OPT_THANKYOU_TEXT);
        $instant = !$register_only && get_option(self::OPT_AUTO_FEEDBACK) === '1';
        $feedback_block = '';

        if ($instant) {
            $api_key = trim((string)get_option(self::OPT_API_KEY));
            $cv_excerpt = mb_substr($file_text, 0, 18000);
            $feedback = $api_key ? $this->generate_ai_feedback($api_key, $cv_excerpt, $role, $sector) : 'AI feedback not configured. Add your API key in Settings.';
            if ($post_id) add_post_meta($post_id, '_kcvf_feedback', $feedback);

            // Normaliza -> quita <strong> -> sanea HTML
            $normalized = $this->kcvf_normalize_ai_html( $feedback );
            $no_strong  = $this->strip_strong_from_body( $normalized );
            $allowed = [
              'h2'=>[], 'h3'=>[], 'p'=>[], 'br'=>[],
              'ul'=>[], 'ol'=>[], 'li'=>[],
              'em'=>[],
              'a'=>['href'=>[], 'target'=>[], 'rel'=>[]],
              'div'=>['class'=>[]], 'span'=>['class'=>[]],
            ];
            $safe_feedback = wp_kses( $no_strong, $allowed );

            // Email al candidato (HTML)
            if (is_email($email)) {
                $headers = ['Content-Type: text/html; charset=UTF-8'];
            $body = '<p>Hello' . ($name ? ' ' . esc_html($name) : '') . '</p>
            <p>Thank you for sharing your CV. Here is your feedback:</p>'
                    . $safe_feedback
                    . '<p>Kovacic Executive Talent Research Team</p>';
                wp_mail($email, 'Your CV feedback', $body, $headers);
            }

            // Aviso interno (texto)
            $notify = $this->get_notify_emails();
            if (!empty($notify)) {
                $body_admin = "New CV submission: {$email}\nName: {$name}\nTarget role: {$role}\nSector: {$sector}\nNotes: {$notes}\nFile: {$stored_path}\nConverted DOCX: " . ($converted_docx ?: '—') . "\n\n--- FEEDBACK (plain text) ---\n" . wp_strip_all_tags($safe_feedback);
                wp_mail($notify, 'New CV submission + Feedback', $body_admin);
            }

            // Bloque visible + DEBUG solo admin
            $feedback_block = '<div class="kcvf-alert"><strong>' . esc_html($thankyou) . '</strong></div>'
                            . '<h3>Instant feedback</h3>'
                            . '<div class="kcvf-feedback">' . $safe_feedback . '</div>';

            if ( current_user_can('manage_options') ) {
                $preview = esc_html( mb_substr( (string)$file_text, 0, 400 ) );
                $feedback_block .= '<div class="kcvf-debug"><strong>DEBUG (solo admin):</strong>'
                                 . '<br>Extraction method: ' . esc_html($extract_method)
                                 . '<br>Characters extracted: ' . intval($char_count)
                                 . '<br>Converted DOCX: ' . ($converted_docx ? esc_html($converted_docx) : '—')
                                 . '<br><pre style="white-space:pre-wrap;margin:8px 0 0;">' . $preview . '</pre></div>';
            }

        } else {
            // Solo aviso interno y/o confirmación de registro
            $notify = $this->get_notify_emails();
            if (!empty($notify)) {
                $subject = $register_only ? 'New CV registration' : 'New CV submission';
                $body_admin = "New CV submission: {$email}\nName: {$name}\nTarget role: {$role}\nSector: {$sector}\nNotes: {$notes}\nFile: {$stored_path}\n";
                if (!$register_only) {
                    $body_admin .= "(Instant feedback is disabled.)";
                }
                wp_mail($notify, $subject, $body_admin);
            }
            if ($register_only && is_email($email)) {
                $headers = ['Content-Type: text/html; charset=UTF-8'];
                $body = '<p>Hello ' . ($name ? '' . esc_html($name) : '') . '</p><p>Thank you for sharing your CV. We will contact you for future opportunities.</p><p>Kovacic Executive Talent Research Team</p>';
                wp_mail($email, 'CV received', $body, $headers);
            }
            $feedback_block = '<div class="kcvf-alert"><strong>' . esc_html($thankyou) . '</strong></div>';

            if ( current_user_can('manage_options') ) {
                $preview = esc_html( mb_substr( (string)$file_text, 0, 400 ) );
                $feedback_block .= '<div class="kcvf-debug"><strong>DEBUG (admin only):</strong>'
                                 . '<br>Extraction method: ' . esc_html($extract_method)
                                 . '<br>Characters extracted: ' . intval($char_count)
                                 . '<br>Converted DOCX: ' . ($converted_docx ? esc_html($converted_docx) : '—')
                                 . '<br><pre style="white-space:pre-wrap;margin:8px 0 0;">' . $preview . '</pre></div>';
            }
        }

        return '<div class="kcvf-wrapper">' . $feedback_block . '</div>';
    }

    private function extract_docx_text($path) {
        $text = '';
        if (!class_exists('ZipArchive')) return $text;
        $zip = new ZipArchive;
        if ($zip->open($path) === true) {
            $xml = $zip->getFromName('word/document.xml');
            $zip->close();
            if ($xml) {
                $xml = preg_replace('/<w:p[^>]*>/', "\n", $xml);
                $xml = preg_replace('/<\/w:p>/', "\n", $xml);
                $xml = strip_tags($xml);
                $text = html_entity_decode($xml, ENT_QUOTES | ENT_XML1, 'UTF-8');
            }
        }
        return trim($text);
    }

    /** Intento de extracción en servidor con binarios (opcional). Devuelve texto o ''. */
    private function extract_pdf_text_server($path, &$extract_method = 'pdf') {
        $extract_method = 'pdf:';
        $run = function($cmd) {
            $desc = [1 => ['pipe','w'], 2 => ['pipe','w']];
            $p = proc_open($cmd, $desc, $pipes);
            if (!is_resource($p)) return ['', 'proc_open failed', 1];
            $out = stream_get_contents($pipes[1]);
            $err = stream_get_contents($pipes[2]);
            foreach ($pipes as $pp) { if (is_resource($pp)) fclose($pp); }
            $code = proc_close($p);
            return [$out,$err,$code];
        };

        // pdftotext
        if (trim(@shell_exec('which pdftotext')) !== '') {
            list($o,$e,$c) = $run('pdftotext -enc UTF-8 -eol unix ' . escapeshellarg($path) . ' -');
            if ($c === 0 && trim($o) !== '') { $extract_method .= 'pdftotext'; return trim($o); }
            list($o2,$e2,$c2) = $run('pdftotext -layout -enc UTF-8 -eol unix ' . escapeshellarg($path) . ' -');
            if ($c2 === 0 && trim($o2) !== '') { $extract_method .= 'pdftotext-layout'; return trim($o2); }
        }

        // mutool
        if (trim(@shell_exec('which mutool')) !== '') {
            list($o3,$e3,$c3) = $run('mutool draw -F txt -o - ' . escapeshellarg($path));
            if ($c3 === 0 && trim($o3) !== '') { $extract_method .= 'mutool'; return trim($o3); }
        }

        // ocrmypdf → pdftotext/mutool
        if (trim(@shell_exec('which ocrmypdf')) !== '') {
            $tmp_ocr = $path . '.ocr.pdf';
            list($o4,$e4,$c4) = $run('ocrmypdf --skip-text -l spa+eng ' . escapeshellarg($path) . ' ' . escapeshellarg($tmp_ocr) . ' 2>&1');
            if ($c4 === 0 && file_exists($tmp_ocr)) {
                if (trim(@shell_exec('which pdftotext')) !== '') {
                    list($o5,$e5,$c5) = $run('pdftotext -enc UTF-8 -eol unix ' . escapeshellarg($tmp_ocr) . ' -');
                    @unlink($tmp_ocr);
                    if ($c5 === 0 && trim($o5) !== '') { $extract_method .= 'ocrmypdf->pdftotext'; return trim($o5); }
                }
                if (trim(@shell_exec('which mutool')) !== '') {
                    list($o6,$e6,$c6) = $run('mutool draw -F txt -o - ' . escapeshellarg($tmp_ocr));
                    @unlink($tmp_ocr);
                    if ($c6 === 0 && trim($o6) !== '') { $extract_method .= 'ocrmypdf->mutool'; return trim($o6); }
                }
                @unlink($tmp_ocr);
            }
        }

        $extract_method .= 'none';
        return '';
    }

    /**
     * Genera un DOCX mínimo a partir de texto plano.
     */
    private function generate_docx_from_text($text, $out_path) {
        if (!class_exists('ZipArchive')) return false;

        $zip = new ZipArchive();
        if ($zip->open($out_path, ZipArchive::CREATE | ZipArchive::OVERWRITE) !== true) return false;

        // Normalizar saltos de línea
        $lines = preg_split("/\r\n|\r|\n/", (string)$text);

        // document.xml
        $doc = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
             . '<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">'
             . '<w:body>';
        foreach ($lines as $line) {
            $safe = htmlspecialchars($line, ENT_XML1 | ENT_COMPAT, 'UTF-8');
            $doc .= '<w:p><w:r><w:t xml:space="preserve">'.$safe.'</w:t></w:r></w:p>';
        }
        $doc .= '<w:sectPr/></w:body></w:document>';

        // [Content_Types].xml
        $ct = '<?xml version="1.0" encoding="UTF-8"?>'
            . '<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">'
            . '<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>'
            . '<Default Extension="xml" ContentType="application/xml"/>'
            . '<Override PartName="/word/document.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"/>'
            . '<Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml"/>'
            . '<Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml"/>'
            . '</Types>';

        // _rels/.rels
        $rels = '<?xml version="1.0" encoding="UTF-8"?>'
              . '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">'
              . '<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="word/document.xml"/>'
              . '</Relationships>';

        // word/_rels/document.xml.rels
        $docrels = '<?xml version="1.0" encoding="UTF-8"?>'
                 . '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"/>';

        // docProps/core.xml
        $now = gmdate('Y-m-d\TH:i:s\Z');
        $core = '<?xml version="1.0" encoding="UTF-8"?>'
              . '<cp:coreProperties xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties" '
              . 'xmlns:dc="http://purl.org/dc/elements/1.1/" '
              . 'xmlns:dcterms="http://purl.org/dc/terms/" '
              . 'xmlns:dcmitype="http://purl.org/dc/dcmitype/" '
              . 'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'
              . '<dc:title>CV convertido desde PDF</dc:title>'
              . '<dc:creator>KCVF</dc:creator>'
              . '<cp:lastModifiedBy>KCVF</cp:lastModifiedBy>'
              . '<dcterms:created xsi:type="dcterms:W3CDTF">'.$now.'</dcterms:created>'
              . '<dcterms:modified xsi:type="dcterms:W3CDTF">'.$now.'</dcterms:modified>'
              . '</cp:coreProperties>';

        // docProps/app.xml
        $app = '<?xml version="1.0" encoding="UTF-8"?>'
             . '<Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties" '
             . 'xmlns:vt="http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes">'
             . '<Application>KCVF</Application>'
             . '</Properties>';

        // Escribir archivos en el zip DOCX
        $zip->addFromString('[Content_Types].xml', $ct);
        $zip->addFromString('_rels/.rels', $rels);
        $zip->addFromString('word/document.xml', $doc);
        $zip->addFromString('word/_rels/document.xml.rels', $docrels);
        $zip->addFromString('docProps/core.xml', $core);
        $zip->addFromString('docProps/app.xml', $app);

        $zip->close();
        return file_exists($out_path);
    }

    private function generate_ai_feedback($api_key, $cv_text, $role, $sector) {
        $model = 'gpt-4o-mini'; // puedes cambiarlo si lo deseas
        $prompt = $this->build_prompt($cv_text, $role, $sector);

        $resp = wp_remote_post('https://api.openai.com/v1/chat/completions', [
            'headers' => [
                'Authorization' => 'Bearer ' . $api_key,
                'Content-Type'  => 'application/json',
            ],
            'timeout' => 60,
            'body' => wp_json_encode([
                'model' => $model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' =>
"You are a senior recruiter. Provide brief, clear, and actionable feedback.

FORMAT:
- Respond ONLY as a valid HTML fragment (no <html> or <body>).
- Use <h2> and <h3> for section headings (do not use <strong> in titles).
- Use <p>, <ul>, <ol>, <li> for the content.
- Do NOT use <strong> or <em> in normal content. Reserve bold only for headings via <h2>/<h3>.
- Do not include code blocks or fences (```).

CONTENT:
- Tailor everything to the role and sector provided by the user.
- It is also important to give feedback on the structure and layout of the CV; it should be clear, logical, and organised.
- Do NOT invent information that is not in the CV.
- Do NOT mention “energy/infrastructure/renewables” unless the SECTOR explicitly requires it."
                    ],
                    ['role' => 'user', 'content' => $prompt],
                ],
                'temperature' => 0.3,
            ]),
        ]);

        if (is_wp_error($resp)) {
            return 'AI request failed: ' . $resp->get_error_message();
        }
        $code = wp_remote_retrieve_response_code($resp);
        $body = wp_remote_retrieve_body($resp);
        $json = json_decode($body, true);
        if ($code !== 200 || !isset($json['choices'][0]['message']['content'])) {
            return 'The AI returned an unexpected response. Check the API key and usage limits.';
        }
        return trim($json['choices'][0]['message']['content']);
    }


    private function build_prompt($cv_text, $role, $sector) {
        $role = trim((string)$role);
        $sector = trim((string)$sector);

        // Detect if the sector relates to energy/infrastructure
        $s = mb_strtolower($sector);
        $is_energy = preg_match('/energ|renov|solar|eólic|hidro|infraestruct|grid|transmis|oil\s*&?\s*gas/i', $s);

        $ban_clause = $is_energy
            ? 'You may refer to the energy/infrastructure sector if relevant.'
            : 'DO NOT mention “energy”, “infrastructure” or “renewables”. Use language applicable to the sector provided.';

        $cv_len = mb_strlen($cv_text);
        $cv_notice = ($cv_len < 400)
            ? "NOTE: The CV text is scarce or could not be extracted well. Provide useful recommendations and ask for missing data (achievements, metrics, tools) focused on the role/sector."
            : "";

        return
"USER DATA
- Target role/area: " . ($role ?: "(unspecified)") . "
- Sector: " . ($sector ?: "(unspecified)") . "

CRITICAL RULES
- Adapt the feedback to the role and sector above.
- Do not invent achievements, companies or technologies.
- $ban_clause
- Return HTML ONLY (no code blocks, no ```).
- Section headings must be in <h2> or <h3> (already bold).
- Content should be in <p>, <ul>, <ol>, <li> — no <strong> or <em>.

$cv_notice

CV CONTENT (plain text):
----------------------
$cv_text

RETURN (in HTML):
<p><em>Detected role: " . ($role ?: "—") . " | Sector: " . ($sector ?: "—") . "</em></p>

<h2>1) Top 5 improvements</h2>
<ul><li>Normal text…</li></ul>

<h2>2) Tips to quantify impact</h2>
<p>Normal text…</p>
<ul><li>Normal text…</li></ul>

<h2>3) Section review</h2>
<h3>Summary</h3><p>Normal text…</p>
<h3>Experience</h3><p>Normal text…</p>
<h3>Education</h3><p>Normal text…</p>
<h3>Skills</h3><p>Normal text…</p>

<h2>4) ATS/readability tips</h2>
<ul><li>Normal text…</li></ul>

<h2>5) Improved summary</h2>
<p>Normal text (3–5 lines, tailored to role/sector)…</p>";
    }

    public function metabox() {
        add_meta_box('kcvf_es_details', 'Submission details', [$this, 'metabox_render'], 'cv_submission', 'side', 'high');
    }

    public function metabox_render($post) {
        $name = get_post_meta($post->ID, '_kcvf_name', true);
        $email = get_post_meta($post->ID, '_kcvf_email', true);
        $role = get_post_meta($post->ID, '_kcvf_role', true);
        $sector = get_post_meta($post->ID, '_kcvf_sector', true);
        $file = get_post_meta($post->ID, '_kcvf_file', true);
        $feedback = get_post_meta($post->ID, '_kcvf_feedback', true);

        $char_count = (int) get_post_meta($post->ID, '_kcvf_char_count', true);
        $extract_method = get_post_meta($post->ID, '_kcvf_extract_method', true);
        $text_excerpt = get_post_meta($post->ID, '_kcvf_text_excerpt', true);
        $converted_docx = get_post_meta($post->ID, '_kcvf_converted_docx', true);

        // Derivar URL pública
        $upload_dir = wp_upload_dir();
        $file_url = '';
        if ($file && isset($upload_dir['basedir'], $upload_dir['baseurl'])) {
            $file_url = str_replace($upload_dir['basedir'], $upload_dir['baseurl'], $file);
        }
        $conv_url = '';
        if ($converted_docx && isset($upload_dir['basedir'], $upload_dir['baseurl'])) {
            $conv_url = str_replace($upload_dir['basedir'], $upload_dir['baseurl'], $converted_docx);
        }

        wp_nonce_field('kcvf_es_meta_save', 'kcvf_es_meta_nonce');
        ?>
        <p><strong>Name:</strong><br><?php echo esc_html($name); ?></p>
        <p><strong>Email:</strong><br><?php echo esc_html($email); ?></p>
        <p><strong>Role:</strong><br><?php echo esc_html($role); ?></p>
        <p><strong>Sector:</strong><br><?php echo esc_html($sector); ?></p>
        <p><strong>File:</strong><br><?php echo $file ? esc_html($file) : '—'; ?></p>
        <?php if ($file_url): ?>
            <p><a href="<?php echo esc_url($file_url); ?>" target="_blank" rel="noopener">Open stored file</a></p>
        <?php endif; ?>
        <?php if ($converted_docx): ?>
            <p><strong>Converted DOCX:</strong><br><?php echo esc_html($converted_docx); ?>
            <?php if ($conv_url): ?><br><a href="<?php echo esc_url($conv_url); ?>" target="_blank" rel="noopener">Download generated DOCX</a><?php endif; ?></p>
        <?php endif; ?>
        <p><strong>Extraction method:</strong><br><?php echo esc_html($extract_method ?: '—'); ?></p>
        <p><strong>Number of characters extracted:</strong><br><?php echo esc_html($char_count ?: 0); ?></p>
        <p><strong>Text excerpt (first 400):</strong></p>
        <textarea readonly style="width:100%;min-height:120px;"><?php echo esc_textarea($text_excerpt); ?></textarea>
        <p><strong>Feedback (editable):</strong></p>
        <textarea name="kcvf_feedback" style="width:100%;min-height:160px;"><?php echo esc_textarea($feedback); ?></textarea>
        <p><button class="button button-primary" name="kcvf_regenerate" value="1">Regenerar con IA (usa el archivo actual)</button></p>
        <?php
    }

    public function save_meta($post_id) {
        if (!isset($_POST['kcvf_es_meta_nonce']) || !wp_verify_nonce($_POST['kcvf_es_meta_nonce'], 'kcvf_es_meta_save')) return;
        if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) return;
        if (!current_user_can('edit_post', $post_id)) return;

        if (isset($_POST['kcvf_feedback'])) {
            update_post_meta($post_id, '_kcvf_feedback', sanitize_textarea_field($_POST['kcvf_feedback']));
        }
        if (isset($_POST['kcvf_regenerate']) && $_POST['kcvf_regenerate']) {
            $api_key = trim((string)get_option(self::OPT_API_KEY));
            if (!$api_key) return;

            $file = get_post_meta($post_id, '_kcvf_file', true);
            $role = get_post_meta($post_id, '_kcvf_role', true);
            $sector = get_post_meta($post_id, '_kcvf_sector', true);

            $text = '';
            if ($file && file_exists($file)) {
                $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
                $extract_method = 'manual:';
                if ($ext === 'docx') $text = $this->extract_docx_text($file);
                if ($ext === 'pdf')  $text = $this->extract_pdf_text_server($file, $extract_method);
            }
            if (!$text) $text = '(No text was extracted automatically. You can manually paste the CV content into the prompt.)';

            $feedback = $this->generate_ai_feedback($api_key, mb_substr($text, 0, 18000), $role, $sector);
            update_post_meta($post_id, '_kcvf_feedback', $feedback);
        }
    }
}

new Kovacic_CV_Feedback();
